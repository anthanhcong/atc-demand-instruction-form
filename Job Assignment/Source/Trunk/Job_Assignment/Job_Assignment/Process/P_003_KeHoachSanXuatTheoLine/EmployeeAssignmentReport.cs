using System;
using System.IO;
using System.Data;
using System.Text;

namespace Job_Assignment
{
    public static class EmployeeAssignmentReport
    {
        static string COMMA = ",";
        static private bool _DeleteOldFileEveryRunning = false;
        static private string _LogFileType = @".txt";
        static private string _LogFileName = @"EmployeeAssignment";
        static private string _LogFileFullPath;

        static private string _LogFolderName = @"\EmployeeAssignment_Logs\";
        static private string _LogFolderPath = AppDomain.CurrentDomain.BaseDirectory + _LogFolderName;

        static EmployeeAssignmentReport()
        {
            //Check if Log folder created
            CheckAndCreateFolder(_LogFolderPath, false);
            
            string subLogFolderName = String.Format("{0:yyyyMMdd_HHmm}\\", DateTime.Now);
            _LogFolderPath += subLogFolderName;
            
            //Create Sub folder to contain the log
            CheckAndCreateFolder(_LogFolderPath, false);
        }
        
        static void CheckAndCreateFolder(string path, bool deleteFilesInside)
        {
            bool exists = System.IO.Directory.Exists(path);

            if (!exists)
            {
                System.IO.Directory.CreateDirectory(path);
            }
            else if (deleteFilesInside == true)
            {
                System.IO.DirectoryInfo FilesInfolder = new DirectoryInfo(path);

                foreach (FileInfo file in FilesInfolder.GetFiles())
                {
                    file.Delete();
                }
            }
        }

        static public string CreateLogFile()
        {
            string filename = String.Format("{0:yyyyMMdd_HHmmss}__{1}", DateTime.Now, _LogFileName);

            string headerLine1 = @"/**************************************************************************/";
            string headerLine2 = @"* This file  was auto-generated by JOB ASSIGNMENT Version 1.x.x */";
            string headerLine3 = @"*";
            string headerLine4 = @"*            ** WARNING ** ";
            string headerLine5 = @"*    Do **NOT** Edit this File by Hand";
            string headerLine6 = @"/**************************************************************************/";

            _LogFileFullPath = _LogFolderPath + filename + _LogFileType;

            File.AppendAllText(_LogFileFullPath, headerLine1 + "\r\n");
            File.AppendAllText(_LogFileFullPath, headerLine2 + "\r\n");
            File.AppendAllText(_LogFileFullPath, headerLine3 + "\r\n");
            File.AppendAllText(_LogFileFullPath, headerLine4 + "\r\n");
            File.AppendAllText(_LogFileFullPath, headerLine5 + "\r\n");
            File.AppendAllText(_LogFileFullPath, headerLine6 + "\r\n");

            return filename;
        }

        static public string CreateLogFile(string FileName, bool includeHeader)
        {
            string filename = String.Format("{0:yyyyMMdd_HHmmss}__{1}", DateTime.Now, FileName);

            if (includeHeader)
            {
                string headerLine1 = @"/**************************************************************************/";
                string headerLine2 = @"* This file  was auto-generated by JOB ASSIGNMENT Version 1.x.x */";
                string headerLine3 = @"*";
                string headerLine4 = @"*            ** WARNING ** ";
                string headerLine5 = @"*    Do **NOT** Edit this File by Hand";
                string headerLine6 = @"/**************************************************************************/";

                _LogFileFullPath = _LogFolderPath + filename + _LogFileType;

                File.AppendAllText(_LogFileFullPath, headerLine1 + "\r\n");
                File.AppendAllText(_LogFileFullPath, headerLine2 + "\r\n");
                File.AppendAllText(_LogFileFullPath, headerLine3 + "\r\n");
                File.AppendAllText(_LogFileFullPath, headerLine4 + "\r\n");
                File.AppendAllText(_LogFileFullPath, headerLine5 + "\r\n");
                File.AppendAllText(_LogFileFullPath, headerLine6 + "\r\n");
            }

            return filename;
        }

        static public void Log(string logFileName, string logData)
        {
            Log(logFileName, string.Empty, logData);     
        }

        static public void Log(string logFileName, string logFileType, string logData)
        {
            if (logFileType != string.Empty)
            {
                if (logFileType[0] == '.')
                {
                    _LogFileFullPath = _LogFolderPath + logFileName + logFileType;
                }
                else
                {
                    _LogFileFullPath = _LogFolderPath + logFileName + "." + logFileType;
                }                
            }
            else
            {
                //Use default type: text;
                _LogFileFullPath = _LogFolderPath + logFileName + _LogFileType;
            }

            string outputFilePath = _LogFileFullPath;
            File.AppendAllText(outputFilePath, logData + "\r\n");
        }

        public static void Write(DataTable dt, string outputFileName)
        {
            string outputFilePath = _LogFolderPath + outputFileName;

            int[] maxLengths = new int[dt.Columns.Count];

            for (int i = 0; i < dt.Columns.Count; i++)
            {
                maxLengths[i] = dt.Columns[i].ColumnName.Length;

                foreach (DataRow row in dt.Rows)
                {
                    if (!row.IsNull(i))
                    {
                        int length = row[i].ToString().Length;

                        if (length > maxLengths[i])
                        {
                            maxLengths[i] = length;
                        }
                    }
                }
            }

            using (StreamWriter sw = new StreamWriter(outputFilePath, false))
            {
                for (int i = 0; i < dt.Columns.Count; i++)
                {
                    sw.Write(dt.Columns[i].ColumnName.PadRight(maxLengths[i] + 2));
                }

                sw.WriteLine();

                foreach (DataRow row in dt.Rows)
                {
                    for (int i = 0; i < dt.Columns.Count; i++)
                    {
                        if (!row.IsNull(i))
                        {
                            sw.Write(row[i].ToString().PadRight(maxLengths[i] + 2));
                        }
                        else
                        {
                            sw.Write(new string(' ', maxLengths[i] + 2));
                        }
                    }

                    sw.WriteLine();
                }

                sw.Close();
            }
        }

        public static String ToCSV_WithoutColumnName(this DataTable dataTable)
        {
            return dataTable.ToCSV(null, COMMA, false);
        }

        public static String ToCSV_WithColumnName(this DataTable dataTable)
        {
            return dataTable.ToCSV(null, COMMA, true);
        }

        public static String ToCSV(this DataTable dataTable, String qualifier)
        {
            return dataTable.ToCSV(qualifier, COMMA, true);
        }

        private static String ToCSV(this DataTable dataTable, String qualifier, String delimiter, Boolean includeColumnNames)
        {
            if (dataTable == null) return null;

            if (qualifier == delimiter)
            {
                throw new InvalidOperationException(
                    "The qualifier and the delimiter are identical. This will cause the CSV to have collisions that might result in data being parsed incorrectly by another program.");
            }

            var sbCSV = new StringBuilder();

            var delimiterToUse = delimiter ?? COMMA;

            if (includeColumnNames)
            {
                sbCSV.AppendLine(dataTable.Columns.GetHeaderLine(qualifier, delimiterToUse));
            }

            foreach (DataRow row in dataTable.Rows)
            {
                sbCSV.AppendLine(row.ToCSVLine(qualifier, delimiterToUse));
            }

            return sbCSV.Length > 0 ? sbCSV.ToString() : null;
        }

        private static String ToCSVLine(this DataRow dataRow, String qualifier, String delimiter)
        {
            var colCount = dataRow.Table.Columns.Count;
            var rowValues = new String[colCount];

            for (var i = 0; i < colCount; i++)
            {
                rowValues[i] = dataRow[i].Qualify(qualifier);
            }

            return String.Join(delimiter, rowValues);
        }

        private static String GetHeaderLine(this DataColumnCollection columns, String qualifier, String delimiter)
        {
            var colCount = columns.Count;
            var colNames = new String[colCount];

            for (var i = 0; i < colCount; i++)
            {
                colNames[i] = columns[i].ColumnName.Qualify(qualifier);
            }

            return String.Join(delimiter, colNames);
        }

        private static String Qualify(this Object target, String qualifier)
        {
            return qualifier + target + qualifier;
        }

    }
}
